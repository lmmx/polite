# NOTE: copied unceremoniously from lmmx/polars-scheduler
# This file is autogenerated by maturin v1.8.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-commit:
    runs-on: ubuntu-latest
    # Temporarily disable the CI wheel building
    if: false
    # This job only runs if the commit message meets the condition
    # if: >
    #   (
    #     (
    #       (github.event_name == 'push')
    #       || (github.event_name == 'pull_request' && github.event.pull_request.user.login == 'lmmx')
    #     )
    #     &&
    #     (
    #       (startsWith(github.event.head_commit.message, 'chore(release)') && !contains(github.event.head_commit.message, 'ðŸ¦€')) ||
    #       contains(github.event.head_commit.message, 'cibuildwheel')
    #     )
    #   )
    #   || (github.event_name == 'workflow_dispatch')
    #   || (github.event_name == 'pull_request' && github.event.pull_request.user.login == 'lmmx')
    steps:
      - name: Confirm commit message matched
        run: echo "Commit message matched the condition."

  linux:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
            before: yum install -y openssl-devel
            dockeropts: ""
            skip: false
            manylinux: auto
          - runner: ubuntu-22.04
            target: x86
            before: |
              python3 -m ensurepip && \
              yum install \
                openssl-devel.i686 \
                pkg-config \
                glibc-devel.i686 \
                libstdc++-devel.i686 \
                gcc-toolset-14-libstdc++-devel.i686 \
                -y && \
              which gcc && \
              ln -s $(which gcc) /usr/bin/i686-linux-gnu-gcc && \
              ls -l /usr/bin/i686-linux-gnu-gcc && \
              /usr/bin/i686-linux-gnu-gcc --version && \
              i686-linux-gnu-gcc --version && \
              mkdir -p polars-genson-py/.cargo && \
              cat > polars-genson-py/.cargo/config.toml << EOF
              [target.i686-unknown-linux-gnu]
              rustflags = [
                "-C", "link-arg=-v",
              ]
              EOF
              cat polars-genson-py/.cargo/config.toml
            dockeropts: >
              --env CC_i686_unknown_linux_gnu=/usr/bin/i686-linux-gnu-gcc
              --env CFLAGS_i686_unknown_linux_gnu=-m32
              --env PKG_CONFIG_ALLOW_CROSS=1
              --env PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig
            skip: false
            manylinux: "2_28"
          - runner: ubuntu-22.04
            target: aarch64
            before: |
              sudo apt-get update -y && \
              sudo apt-get install pkg-config -y
            dockeropts: ""
            skip: false
            manylinux: 2_28
          - runner: ubuntu-22.04
            target: armv7
            before: |
              sudo apt-get update -y &&
              sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf &&
              mkdir -p polars-genson-py/.cargo &&
              cat > polars-genson-py/.cargo/config.toml << EOF
              [target.armv7-unknown-linux-gnueabihf]
              rustflags = [
                "-C", "link-arg=-Wl,--verbose",
              ]
              EOF
              cat polars-genson-py/.cargo/config.toml
            dockeropts: >
              --env CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc
              --env CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++
              --env AR_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-ar
              --env PKG_CONFIG_ALLOW_CROSS=1
            skip: false
            manylinux: auto
          - runner: ubuntu-22.04
            target: s390x
            before: |
              sudo apt-get update -y &&
              sudo apt-get install -y gcc-s390x-linux-gnu g++-s390x-linux-gnu &&
              sudo ln -s "$(command -v s390x-linux-gnu-gcc)" /usr/bin/s390x-unknown-linux-gnu-gcc &&
              mkdir -p polars-genson-py/.cargo &&
              cat > polars-genson-py/.cargo/config.toml << EOF
              [target.s390x-unknown-linux-gnu]
              rustflags = [
                "-C", "link-arg=-Wl,--verbose",
              ]
              EOF
              cat polars-genson-py/.cargo/config.toml
            dockeropts: >
              --env CC_s390x_unknown_linux_gnu=s390x-linux-gnu-gcc
              --env CXX_s390x_unknown_linux_gnu=s390x-linux-gnu-g++
              --env AR_s390x_unknown_linux_gnu=s390x-linux-gnu-ar
              --env CFLAGS_s390x_unknown_linux_gnu=-march=z10
              --env PKG_CONFIG_ALLOW_CROSS=1
            skip: false
            manylinux: auto
          - runner: ubuntu-22.04
            target: ppc64le
            before: |
              sudo apt-get update -y &&
              sudo apt-get install -y gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu &&
              sudo ln -s "$(command -v powerpc64le-linux-gnu-gcc)" /usr/bin/powerpc64le-unknown-linux-gnu-gcc &&
              mkdir -p polars-genson-py/.cargo &&
              cat > polars-genson-py/.cargo/config.toml << EOF
              [target.powerpc64le-unknown-linux-gnu]
              rustflags = [
                "-C", "link-arg=-Wl,--verbose",
              ]
              EOF
              cat polars-genson-py/.cargo/config.toml
            dockeropts: >
              --env CC_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-gcc
              --env CXX_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-g++
              --env AR_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-ar
              --env PKG_CONFIG_ALLOW_CROSS=1
            skip: false
            manylinux: auto
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path polars-genson-py/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: ${{ matrix.platform.manylinux }}
          before-script-linux: |
            ${{ matrix.platform.before }}
          docker-options: ${{ matrix.platform.dockeropts }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: windows-latest
            target: x64
            skip: false
          - runner: windows-latest
            target: x86
            skip: false
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path polars-genson-py/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
            skip: false
          - runner: macos-14
            target: aarch64
            skip: false
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path polars-genson-py/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    needs: [check-commit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path polars-genson-py/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v5
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
